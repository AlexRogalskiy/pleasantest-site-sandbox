---
title: Small Screens
author: Art Vandelay
date: 2022-01-03
layout: blank
css:
  - /group/example-b.css
scripts:
  - /group/example-b.js
---
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.27.0/prism.min.js"></script>
<div class="body-wrapper">

  <div class="heading-wrapper">
    <img class="logo" src="/../assets/images/pleasantest-logo.svg"></img>

    <h2 class="tagline">
      Frustration-free automated UI testing in a real browser, with a familiar and intuitive syntax
    </h2>

    <button class="get-started">Get Started</button>
    <button class="gh">Github <img class="gh-logo" src="/../assets/images/github-logo.svg"></button>
    <div class="code-wrapper">
      <pre class="code-block"><code class="language-css">test(
  'Toggle Hikes List',
  withBrowser(async ({
    screen, utils, page, user
  }) => {
  // Find the hikes button
  const hikesButton = await screen.getByRole(
    'button',
    { name: 'View Hikes' }
  );
  // Click it
  await user.click(aboutBtn);
  // Confirm the hikes heading is visible
  await await screen.getByRole(
    heading,
    { name: 'Hikes Near You' }
  ).toBeVisible();
);</code></pre>
    </div>
  </div>
  <div class="highlight-wrapper">
    <div class="section highlight1">
      <h2>Test Real Use Cases in Real Browsers</h2>
      <img src="https://via.placeholder.com/300">
      <p>Increase confidence in your code by writing tests that mimic real user behavior and running them in a real browser. When things go wrong, debug your tests using developer tools.</p>
    </div>
    <div class="section highlight2">
      <h2>Build Inclusive UIs with Accessibility Testing Features</h2>
      <img src="https://via.placeholder.com/300">
      <p>One-of-a-kind tools like Accessibility Tree Snapshots as well as features built into Jest and Testing Library make it easier to understand, improve, and maintain the accessibility of your interfaces.</p>
    </div>
    <div class="section highlight3">
      <h2>Get Up to Speed Quickly With Familiar Tools</h2>
      <img src="https://via.placeholder.com/300">
      <p>Pleasantest super-charges tools like Jest and Testing Library that you may already be familiar with, while avoiding the drawbacks of simulated browsers</p>
    </div>
  </div>
  <div class="instructions-wrapper">
    <h2>Getting Started</h2>
    <p>Follow these 5 quick steps to get up and running with Pleasantest. For more information, <a href="#">check out the documentation on GitHub.</a></p>

    <div class="step step1">
      <div class="circle"><h2>1</h2></div>
      <h3>Install Jest and Pleasantest</h3>
      <p>Pleasantest integrates with Jest tests. If you haven't set up Jest yet, <a href="#">here is Jest's getting started guide.</a></p>
      <p>You’ll need to install Jest and Pleasantest:</p>
      <div class="code-wrapper">
        <pre class="code-block"><code class="language-css">npm i -D jest pleasantest</code></pre>
      </div>
    </div>
    <div class="step step2">
      <div class="circle"><h2>2</h2></div>
      <h3>Write your first test</h3>
      <p>Now you’re ready to write your first test! Wrapping your test callback with `withBrowser` allows you to hook into a real browser with Pleasantest:</p>
      <div class="code-wrapper">
        <pre class="code-block"><code class="language-css">// If you want to use module imports you’ll need to configure
  //  Jest and Babel to use ESM
  // See https://jestjs.io/docs/getting-started#using-babel
  const {withBrowser} = require(‘pleasantest’);

  test(
    'test name',
    withBrowser(async () => {
      // Your test code here
    }),
);</code></pre>
      </div>
    </div>
    <div class="step step3">
      <div class="circle"><h2>3</h2></div>
      <h3>Add UI markup to your test:</h3>
      <p>Once you’ve created a test there are three ways to insert markup:</p>
      <div class="code-wrapper">
        <pre class="code-block"><code class="language-css">// For JS frameworks you can run arbitrary JavaScript
await utils.runJS(`
  // ./app could be a .js, .jsx .ts, or .tsx file
  import { App } from './app'
  import { render } from 'react-dom'

  render(<App />, document.body)
  `);</code></pre>
      </div>
    </div>
    <div class="step step4">
      <div class="circle"><h2>4</h2></div>
      <h3>Interact With Your App In a Real Browser</h3>
      <p>Pleasantest comes prepackaged with helpful utilities to find and interact with elements like a real user:</p>
      <div class="code-wrapper">
        <pre class="code-block"><code class="language-css">await user.type(
  await screen.getByRole('
    'textbox',
    { name: 'Pick a Location' }
  ),
  'Portland Oregon'
);
await user.click(
  await screen.getByRole('
    button,
    { name: 'Find Hikes' }
  )
);</code></pre>
      </div>
    </div>
    <div class="step step5">
      <div class="circle"><h2>5</h2></div>
      <h3>Make Assertions Against the DOM</h3>
      <p>Use Jest-Dom’s intuitive syntax to confirm your interface responds correctly to user actions:</p>
      <div class="code-wrapper">
        <pre class="code-block"><code class="language-css">await expect(hikeResults).toBeVisible();</code></pre>
      </div>
    </div>
    <div class="step step6">
      <div class="circle"><h2>6</h2></div>
      <h3>Run your tests</h3>
      <p>Now you can use the Jest CLI commands (link) to run your tests. The <a href="#">testTimeout</a> flag tells Jest to allow the test to run for up to 10 seconds, which is necessary for the first time Pleasantest starts the browser.</p>
      <div class="code-wrapper">
        <pre class="code-block"><code class="language-css">npx jest --testTimeout=10000</code></pre>
      </div>
    </div>
  </div>
</div>
<div class="footer">
    <h2>Documentation</h2>
    <ul>
      <li><a href="#">Github</a></li>
      <li><a href="#">NPM</a></li>
      <li><a href="#">Submit an Issue</a></li>
    </ul>

    <h2>Articles</h2>
    <ul>
      <li><a href="#">Introducing Pleasantest</a></li>
      <li><a href="#">Accessibility Tree Snapshots</a></li>
    </ul>

    <h2>Examples</h2>
    <ul>
      <li><a href="#">Testing a Reach Modal</a></li>
      <li><a href="#">Intregrating with Vite and Vue</a></li>
      <li><a href="#">Using Accessibility Tree Snapshots</a></li>
    </ul>

    <p>Built with love by <a href="#">Cloud Four <img class="logo" src="/../assets/images/cloudfour-logo.svg"></img></a></p>
  </div>
